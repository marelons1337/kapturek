# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe("/property/expenses", type: :request) do
  # This should return the minimal set of attributes required to create a valid
  # Property::Expense. As you add validations to Property::Expense, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    valid_attributes = attributes_for(:property_expense)
    valid_attributes[:expensable_type] = "Property::Sale"
    valid_attributes[:expensable_id] = create(:property_sale).id
    valid_attributes
  end

  let(:invalid_attributes) do
    { name: "new without required parameters", amount: "" }
  end

  describe "GET /index" do
    it "renders a successful response" do
      create(:property_expense)
      get property_expenses_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      expense = create(:property_expense)
      get property_expense_url(expense)
      expect(response).to(be_successful)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_property_expense_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      expense = create(:property_expense)
      get edit_property_expense_url(expense)
      expect(response).to(be_successful)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Property::Expense" do
        expect do
          post(property_expenses_url, params: { property_expense: valid_attributes })
        end.to(change(Property::Expense, :count).by(1))
      end

      it "redirects to the created property_expense" do
        post property_expenses_url, params: { property_expense: valid_attributes }
        expect(response).to(redirect_to(property_expense_url(Property::Expense.last)))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Property::Expense" do
        expect do
          post(property_expenses_url, params: { property_expense: invalid_attributes })
        end.to(change(Property::Expense, :count).by(0))
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post property_expenses_url, params: { property_expense: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        { name: "new name" }
      end

      it "updates the requested property_expense" do
        expense = create(:property_expense)
        patch property_expense_url(expense), params: { property_expense: new_attributes }
        expense.reload
        expect(expense.name).to(eq("new name"))
      end

      it "redirects to the property_expense" do
        expense = create(:property_expense)
        patch property_expense_url(expense), params: { property_expense: new_attributes }
        expense.reload
        expect(response).to(redirect_to(property_expense_url(expense)))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        expense = create(:property_expense)
        patch property_expense_url(expense), params: { property_expense: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested property_expense" do
      expense = create(:property_expense)
      expect do
        delete(property_expense_url(expense))
      end.to(change(Property::Expense, :count).by(-1))
    end

    it "redirects to the property_expenses list" do
      expense = create(:property_expense)
      delete property_expense_url(expense)
      expect(response).to(redirect_to(property_expenses_url))
    end
  end

  describe "GET /fetch_expensables" do
    it "renders a successful response" do
      get fetch_expensables_property_expenses_url
      expect(response).to(be_successful)
    end
  end
end
